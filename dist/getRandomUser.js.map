{"version":3,"file":"getRandomUser.js","mappings":"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ACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC,CAAC,CAAC;QACrD,MAAMA,KAAK,CAAC,CAAC;MACf;IACF;EAAC;AAAA;;AC3E+C;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMM,IAAI,GAAG,WAAW;AACxB,IAAMC,IAAI,GAAG,IAAI;AACjB,IAAMC,IAAI,GAAGC,KAAK,CAACC,OAAO,IAAI,UAAU;AACxC,IAAMC,oBAAQ,GAAGF,KAAK,CAACG,WAAW,IAAI,cAAc;AACpD,IAAMC,MAAM,GAAGJ,KAAK,CAACK,OAAO,IAAI,SAAS;;AAEzC;AACA,IAAMC,WAAW,GAAG,IAAIrC,WAAW,CAACmC,MAAM,EAAEL,IAAI,EAAEG,oBAAQ,EAAEL,IAAI,EAAEC,IAAI,CAAC;;AAEvE;AACO,SAASS,aAAaA,CAAA,EAAG;EAC9B,IAAI;IACF;IACA,IAAMC,QAAQ,GAAGF,WAAW,CAACZ,aAAa,CAAC,CAAC;IAC5C;IACAF,OAAO,CAACiB,GAAG,CAAC,cAAc,EAAED,QAAQ,CAAC;EACvC,CAAC,CAAC,OAAOjB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;EACrD;AACF;;;;;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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","sources":["webpack://typescript/webpack/bootstrap","webpack://typescript/webpack/runtime/compat get default export","webpack://typescript/webpack/runtime/define property getters","webpack://typescript/webpack/runtime/hasOwnProperty shorthand","webpack://typescript/webpack/runtime/make namespace object","webpack://typescript/external commonjs \"k6/x/sql\"","webpack://typescript/./src/libs/sqlDBClient.ts","webpack://typescript/./src/scenarios/sqlDBClient.ts","webpack://typescript/./src/libs/executor.ts","webpack://typescript/./src/tests/sqlDBClient/getRandomUser.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"k6/x/sql\");","//@ts-ignore\nimport sql from 'k6/x/sql';\n\nexport class SqlDBClient {\n  private dbType: string;\n  private sqlDBHost: string;\n  private sqlDBPort: number;\n  private sqlDBName: string;\n  private sqlDBUserName: string;\n  private sqlDBPassword: string;\n  private dbConnectionString: string;\n  private dbConnection: any;\n\n  // Constructor to initialize SQL database connection settings\n  constructor(\n    sqlDBName: string,\n    sqlDBUserName: string,\n    sqlDBPassword: string,\n    sqlDBHost: string,\n    sqlDBPort: number = 5432,\n    dbType: string = 'postgres'\n  ) {\n    this.dbType = dbType;\n    this.sqlDBName = sqlDBName;\n    this.sqlDBUserName = sqlDBUserName;\n    this.sqlDBPassword = sqlDBPassword;\n    this.sqlDBHost = sqlDBHost;\n    this.sqlDBPort = sqlDBPort;\n    this.dbConnectionString = this.constructConnectionString();\n    this.dbConnection = this.connect(); // Establish a connection to the database\n  }\n\n  // Method to construct the connection string based on the dbType\n  private constructConnectionString(): string {\n    switch (this.dbType) {\n      case 'postgres':\n        return `postgres://${this.sqlDBUserName}:${this.sqlDBPassword}@${this.sqlDBHost}:${this.sqlDBPort}/${this.sqlDBName}?sslmode=disable`;\n      case 'mysql':\n        return `${this.sqlDBUserName}:${this.sqlDBPassword}@tcp(${this.sqlDBHost}:${this.sqlDBPort})/${this.sqlDBName}`;\n      case 'mssql':\n        return `server=${this.sqlDBHost};database=${this.sqlDBName};user id=${this.sqlDBUserName};password=${this.sqlDBPassword}`;\n      default:\n        throw new Error(`Unsupported database type: ${this.dbType}`);\n    }\n  }\n\n  // Method to establish a connection to the database\n  private connect() {\n    try {\n      return sql.open(this.dbType, this.dbConnectionString); // Open database connection\n    } catch (error) {\n      console.error('Error opening database connection:', error); // Log error if connection fails\n      throw error; // Propagate error\n    }\n  }\n\n  // Method to close the database connection\n  close() {\n    try {\n      this.dbConnection.close(); // Close database connection\n    } catch (error) {\n      console.error('Error closing database connection:', error); // Log error if closing fails\n    }\n  }\n\n  // Method to get a random user from the database\n  getRandomUser() {\n    try {\n      const query = 'SELECT * FROM users ORDER BY RANDOM() LIMIT 1'; // Query to fetch a random user\n      const result = sql.query(this.dbConnection, query); // Execute query\n      return result; // Return the result\n    } catch (error) {\n      console.error('Error fetching random user:', error); // Log error if fetching fails\n      throw error; // Propagate error\n    }\n  }\n}\n","import { SqlDBClient } from '../libs/sqlDBClient';\n\n// Environment variable configuration\n// Export these variables in your environment or in a .env file before running the script\n// export DB_USER=your_database_username\n// export DB_PASSWORD=your_database_password\n// export DB_NAME=your_database_name\n// export VUS=1 ITERATIONS=1 MAX_DURATION=30000 EXECUTOR='per-vu-iterations' ENV=perf\n// Configuration constants\nconst host = 'localhost';\nconst port = 5432;\nconst user = __ENV.DB_USER || 'postgres';\nconst password = __ENV.DB_PASSWORD || 'a6QpEQfYLebs';\nconst dbName = __ENV.DB_NAME || 'synapse';\n\n// Reusable SQL database client\nconst sqlDBClient = new SqlDBClient(dbName, user, password, host, port);\n\n// Function to get a random user from the database\nexport function getUserRandom() {\n  try {\n    // Fetch a random user from the database\n    const userInfo = sqlDBClient.getRandomUser();\n    // Log the random user information\n    console.log('Random user:', userInfo);\n  } catch (error) {\n    console.error('Error fetching random user:', error);\n  }\n}\n","// const defaultEnv = { name: __ENV.ENV || 'perf' };\n// const defaultVUs = __ENV.VUS || 1;\n// const defaultIterations = __ENV.ITERATIONS || 1;\n// const defaultDuration = __ENV.DURATION || '1m';\n// const defaultMaxDuration = __ENV.MAX_DURATION || '1m';\n// const defaultRate = __ENV.RATE || 1;\n// const defaultTimeUnit = __ENV.TIME_UNIT || '1s';\n// const defaultStartTime = __ENV.START_TIME || '0s';\n\n// const generateScenarioPerVuIterations = (name, vus, iterations, maxDuration, startTime ) => ({\n//   [name]: {\n//     executor: 'per-vu-iterations',\n//     vus: vus || 1,\n//     startTime: startTime || '0s',\n//     iterations: iterations || 1,\n//     maxDuration: maxDuration || '1m',\n//     tags: { name: name },\n//     env: defaultEnv,\n//     exec: name\n//   }\n// });\n\n// const generateScenarioConstantArrivalRate = (name, duration, rate, timeUnit, preAllocatedVUs, startTime) => ({\n//   [name]: {\n//     executor: 'constant-arrival-rate',\n//     startTime: startTime || '0s',\n//     duration: duration || '1m',\n//     rate: rate || 1,\n//     timeUnit: timeUnit ,\n//     preAllocatedVUs: preAllocatedVUs ,\n//     tags: { name: name },\n//     env: defaultEnv,\n//     exec: name\n//   }\n// });\n\n// const generateScenarioConstantVUs = (name, vus, duration, startTime) => ({\n//   [name]: {\n//     executor: 'constant-vus',\n//     vus: vus,\n//     startTime: startTime,\n//     duration: duration,\n//     tags: { name: name },\n//     env: defaultEnv,\n//     exec: name\n//   }\n// });\n\n// const generateScenarios = (funcExecution, executor) => {\n//   const scenarios = {};\n//   for (let func of funcExecution) {\n//     switch (executor) {\n//       case 'per-vu-iterations':\n//         Object.assign(scenarios, generateScenarioPerVuIterations(func, defaultVUs, defaultIterations, defaultMaxDuration, defaultStartTime));\n//         break;\n//       case 'constant-arrival-rate':\n//         Object.assign(scenarios, generateScenarioConstantArrivalRate(func, defaultDuration, defaultRate, defaultTimeUnit, defaultVUs, defaultStartTime));\n//         break;\n//       case 'constant-vus':\n//         Object.assign(scenarios, generateScenarioConstantVUs(func, defaultVUs, defaultDuration, defaultStartTime));\n//         break;\n//       default:\n//         console.error('Unknown executor type:', executor);\n//     }\n//   }\n//   return scenarios;\n// };\n\n// const generateReqFailedThreshold = (metric, value) => ({\n//   [`http_req_failed{name: ${metric}}`]: [`${value}`],\n// });\n\n// const generateCustomThreshold = (metric, value) => {\n//   // Split the value string into an array of individual threshold values and trim any whitespace\n//   const values = value.split(',').map(val => val.trim());\n//   return {\n//     [metric]: values,\n//   };\n// };\n\n// /**\n//  * Generates a threshold configuration for HTTP request duration.\n//  *\n//  * @param {string} metric - The name of the metric.\n//  * @param {string} value - A comma-separated string of threshold values.\n//  * @returns {Object} - The threshold configuration object.\n//  */\n// const generateReqDurationThreshold = (metric, value) => {\n//   // Split the value string into an array of individual threshold values and trim any whitespace\n//   const values = value.split(',').map(val => val.trim());\n//   return {\n//     // Create a property with the metric name and its threshold values\n//     [`http_req_duration{name: \"${metric}\"}`]: values,\n//   };\n// };\n\n// export {\n//   generateScenarios,\n//   generateScenarioConstantVUs,\n//   generateScenarioConstantArrivalRate,\n//   generateScenarioPerVuIterations,\n//   generateReqDurationThreshold,\n//   generateCustomThreshold,\n//   generateReqFailedThreshold\n// };\n\nexport class k6Executor { \n  private VUs: number;\n  private iterations: number;\n  private duration: string;\n  private maxDuration: string;\n  private rate: number;\n  private timeUnit: string;\n  private startTime: string;\n  constructor() {\n    this.VUs = Number(__ENV.VUS) || 1;\n    this.iterations = Number(__ENV.ITERATIONS) || 1;\n    this.duration = __ENV.DURATION || '1m';\n    this.maxDuration = __ENV.MAX_DURATION || '1m';\n    this.rate = Number(__ENV.RATE) || 1;\n    this.timeUnit = __ENV.TIME_UNIT || '1s';\n    this.startTime = __ENV.START_TIME || '0s';\n  }\n  generateScenarioPerVuIterations(name: string){\n    return {\n      [name]: {\n        executor: 'per-vu-iterations',\n        vus: this.VUs,\n        startTime: this.startTime,\n        iterations: this.iterations,\n        maxDuration: this.maxDuration,\n        tags: { name: name },\n        env: { name: __ENV.ENV || 'perf' },\n        exec: name\n      }\n    }\n  }\n  generateScenarioConstantArrivalRate(name: string){\n    return {\n      [name]: {\n        executor: 'constant-arrival-rate',\n        startTime: this.startTime,\n        duration: this.duration,\n        rate: this.rate,\n        timeUnit: this.timeUnit,\n        preAllocatedVUs: this.VUs,\n        tags: { name: name },\n        env: { name: __ENV.ENV || 'perf' },\n        exec: name\n      }\n    }\n  }\n  generateScenarioConstantVUs(name: string){\n    return {\n      [name]: {\n        executor: 'constant-vus',\n        vus: this.VUs,\n        startTime: this.startTime,\n        duration: this.duration,\n        tags: { name: name },\n        env: { name: __ENV.ENV || 'perf' },\n        exec: name\n      }\n    }\n  }\n  generateScenarios(funcExecution: string[], executor: string){\n    const scenarios = {};\n    for (let func of funcExecution) {\n      switch (executor) {\n        case 'per-vu-iterations':\n          Object.assign(scenarios, this.generateScenarioPerVuIterations(func));\n          break;\n        case 'constant-arrival-rate':\n          Object.assign(scenarios, this.generateScenarioConstantArrivalRate(func));\n          break;\n        case 'constant-vus':\n          Object.assign(scenarios, this.generateScenarioConstantVUs(func));\n          break;\n        default:\n          console.error('Unknown executor type:', executor);\n      }\n    }\n    return scenarios;\n  }\n  generateReqFailedThreshold(metric: string, value: string){\n    return {\n      [`http_req_failed{name: ${metric}}`]: [`${value}`],\n    };\n  }\n  generateCustomThreshold(metric: string, value: string){\n    const values = value.split(',').map(val => val.trim());\n    return {\n      [metric]: values,\n    };\n  }\n  generateReqDurationThreshold(metric: string, value: string){\n    const values = value.split(',').map(val => val.trim());\n    return {\n      [`http_req_duration{name: \"${metric}\"}`]: values,\n    };\n  }\n}\n\n\n","export { getUserRandom } from \"../../scenarios/sqlDBClient\";\nimport { k6Executor } from \"../../libs/executor\";\n\n// Initialize the executor\nconst k6exec = new k6Executor();\nlet funcExecution = ['getUserRandom'];\nconst executor = __ENV.EXECUTOR || 'per-vu-iterations';\nconst scenarios = k6exec.generateScenarios(funcExecution, executor);\nconst threshold = Object.assign(\n  {},\n  k6exec.generateCustomThreshold('http_req_duration{ scenario: getUserRandom }', 'avg<=23904'),\n  k6exec.generateCustomThreshold('http_req_failed{ scenario: getUserRandom }', 'rate<=0.03'),\n);\nexport const options = {\n  scenarios: scenarios,\n  thresholds: threshold,\n}\n"],"names":["sql","SqlDBClient","sqlDBName","sqlDBUserName","sqlDBPassword","sqlDBHost","sqlDBPort","arguments","length","undefined","dbType","_classCallCheck","_defineProperty","dbConnectionString","constructConnectionString","dbConnection","connect","_createClass","key","value","concat","Error","open","error","console","close","getRandomUser","query","result","host","port","user","__ENV","DB_USER","password","DB_PASSWORD","dbName","DB_NAME","sqlDBClient","getUserRandom","userInfo","log","k6Executor","VUs","Number","VUS","iterations","ITERATIONS","duration","DURATION","maxDuration","MAX_DURATION","rate","RATE","timeUnit","TIME_UNIT","startTime","START_TIME","generateScenarioPerVuIterations","name","executor","vus","tags","env","ENV","exec","generateScenarioConstantArrivalRate","preAllocatedVUs","generateScenarioConstantVUs","generateScenarios","funcExecution","scenarios","_iterator","_createForOfIteratorHelper","_step","s","n","done","func","Object","assign","err","e","f","generateReqFailedThreshold","metric","generateCustomThreshold","values","split","map","val","trim","generateReqDurationThreshold","k6exec","EXECUTOR","threshold","options","thresholds"],"sourceRoot":""}